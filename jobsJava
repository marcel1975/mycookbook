#!/bin/bash

###################################################################################################
########################### ###Start of functions definition ######################################
###################################################################################################

usage() 
{
cat << EOF
  $0 -j <jobsName> -x <jdkVersion>
     -j First flag takes 1 argument
     -x Second flag takes 1 argument
EOF
  exit 1
}

runCurlSilent()
{
  eval curl --silent $1
}

runCurlSilentHead()
{
 eval curl --silent --head $1
}

modificationJDK()
{
  echo "Inside modificationJDK function"
  tmpJDKNewFile=`mktemp -p ~/`
  echo "Modification of JDK base on the given param: $jdkVer"
  sed "s#\(<jdk>\)${jdk_old}\(</jdk\)""#\1JDK ${jdkVer}\2#g" $tmpJDKOldFile > $tmpJDKNewFile
  curl -s -v -X POST --data-binary @${tmpJDKNewFile} -H 'Content-Type: application/xml' ${serverUrl}/job/${jobName}/config.xml 2>/dev/null
  rm -f ${tmpJDKNewFile} ${tmpJDKOldFile}
}
    
existingJDK()
{
  echo "Inside existingJDK function"
  for jdk in "${jdkListArray[@]}" 
  do
     [[ $jdkVer = $jdk ]] && modificationJDK
  done
  exit 1
}

theSameJDK()	
{
  tmpJDKOldFile=`mktemp -p ~/` || exit 1 
  echo "Inside TheSameJDK function"
  (curl -s -v ${serverUrl}/job/${jobName}/config.xml 2>/dev/null) > ${tmpJDKOldFile} 
  jdk_old=`awk -F'[<>]' '/<jdk>/{print $3}' $tmpJDKOldFile`
  #[[ $jdk_old = "JDK ${jdkVer}" ]] && usage || existingJDK
  if [ "$jdk_old" = "JDK ${jdkVer}" ]; then
     rm -f ${tmpJDKOldFile}
     usage
  else
     existingJDK
  fi
}

checkingJobName()
{
 echo "Inside checkingJobName function"
 runCurlSilentHead ${jobsUrl} | grep 'HTTP/1.1 200' > /dev/null 
 [[ $? -eq 0 ]] && theSameJDK || usage 
}

startProcessing()
{
  checkingJobName
}

###################################################################################################
################################ End of functions definition ######################################
###################################################################################################


jdkVer=''
jobName=''
countsArg=0
while getopts ":j:x::" option; do
  case "$option" in
    j) jobName=$OPTARG
       countsArg=$((countsArg+1));;
    x) jdkVer=$OPTARG 
       countsArg=$((countsArg+1));;
    :) echo "Option -$OPTARG requires an argument." >&2
       usage
       ;;
    \?) echo "Ivalid option: -$OPTARG " >&2
       usage
       ;;
  esac
done
shift $(( OPTIND - 1 ))

serverUrl='http://jenkins-server.local:8080/'
javaUrl="${serverUrl}configure|grep env.value|tr ' ' '\n'|grep '(JDK)'|tr '\">' '\t'|cut -f1" 
jobsUrl="${serverUrl}job/${jobName}/"
jdkListArray=('1.8.0_66' '1.7.0_79' '1.7.0_80' '1.7.0_55')

[[ $countsArg -eq 2 ]] && startProcessing || usage
